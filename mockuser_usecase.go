// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package main

import (
	"context"
	"sync"
)

// Ensure, that UserInputPortMock does implement UserInputPort.
// If this is not the case, regenerate this file with moq.
var _ UserInputPort = &UserInputPortMock{}

// UserInputPortMock is a mock implementation of UserInputPort.
//
//	func TestSomethingThatUsesUserInputPort(t *testing.T) {
//
//		// make and configure a mocked UserInputPort
//		mockedUserInputPort := &UserInputPortMock{
//			ExecuteFunc: func(contextMoqParam context.Context, s string) (*User, error) {
//				panic("mock out the Execute method")
//			},
//		}
//
//		// use mockedUserInputPort in code that requires UserInputPort
//		// and then make assertions.
//
//	}
type UserInputPortMock struct {
	// ExecuteFunc mocks the Execute method.
	ExecuteFunc func(contextMoqParam context.Context, s string) (*User, error)

	// calls tracks calls to the methods.
	calls struct {
		// Execute holds details about calls to the Execute method.
		Execute []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// S is the s argument value.
			S string
		}
	}
	lockExecute sync.RWMutex
}

// Execute calls ExecuteFunc.
func (mock *UserInputPortMock) Execute(contextMoqParam context.Context, s string) (*User, error) {
	if mock.ExecuteFunc == nil {
		panic("UserInputPortMock.ExecuteFunc: method is nil but UserInputPort.Execute was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		S               string
	}{
		ContextMoqParam: contextMoqParam,
		S:               s,
	}
	mock.lockExecute.Lock()
	mock.calls.Execute = append(mock.calls.Execute, callInfo)
	mock.lockExecute.Unlock()
	return mock.ExecuteFunc(contextMoqParam, s)
}

// ExecuteCalls gets all the calls that were made to Execute.
// Check the length with:
//
//	len(mockedUserInputPort.ExecuteCalls())
func (mock *UserInputPortMock) ExecuteCalls() []struct {
	ContextMoqParam context.Context
	S               string
} {
	var calls []struct {
		ContextMoqParam context.Context
		S               string
	}
	mock.lockExecute.RLock()
	calls = mock.calls.Execute
	mock.lockExecute.RUnlock()
	return calls
}
